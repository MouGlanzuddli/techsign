package util;

import dal.DBContext;
import dal.SmtpConfigDao;
import model.SmtpConfig;
import javax.mail.*;
import javax.mail.internet.*;
import java.sql.Connection;
import java.util.Properties;

public class EmailServiceExtended extends EmailService {
    
    public static boolean sendPasswordResetOtpEmail(String toEmail, String otpCode, String fullName) {
        System.out.println("=== B·∫ÆT ƒê·∫¶U G·ª¨I EMAIL RESET PASSWORD ===");
        System.out.println("Email nh·∫≠n: " + toEmail);
        System.out.println("M√£ OTP: " + otpCode);
        System.out.println("T√™n ng∆∞·ªùi d√πng: " + fullName);
        
        try (Connection conn = new DBContext().getConnection()) {
            SmtpConfigDao smtpDao = new SmtpConfigDao(conn);
            SmtpConfig smtpConfig = smtpDao.getActiveSmtpConfig();
            
            if (smtpConfig == null) {
                System.err.println("‚ùå KH√îNG T√åM TH·∫§Y C·∫§U H√åNH SMTP ACTIVE");
                return sendPasswordResetWithDefaultConfig(toEmail, otpCode, fullName);
            }
            
            System.out.println("‚úÖ T√¨m th·∫•y c·∫•u h√¨nh SMTP");
            
            Properties props = new Properties();
            props.put("mail.smtp.auth", String.valueOf(smtpConfig.isSmtpAuth()));
            props.put("mail.smtp.starttls.enable", String.valueOf(smtpConfig.isSmtpStarttls()));
            props.put("mail.smtp.host", smtpConfig.getSmtpHost());
            props.put("mail.smtp.port", smtpConfig.getSmtpPort());
            props.put("mail.debug", "true");
            
            Session session = Session.getInstance(props, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(smtpConfig.getSmtpUsername(), smtpConfig.getSmtpPassword());
                }
            });
            
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(smtpConfig.getFromEmail(), smtpConfig.getFromName()));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject("TechSign - ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u");
            
            String htmlContent = buildPasswordResetEmailTemplate(otpCode, fullName);
            message.setContent(htmlContent, "text/html; charset=utf-8");
            
            Transport.send(message);
            System.out.println("‚úÖ G·ª¨I EMAIL RESET PASSWORD TH√ÄNH C√îNG!");
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI KHI G·ª¨I EMAIL RESET PASSWORD:");
            e.printStackTrace();
            return false;
        }
    }
    
    private static boolean sendPasswordResetWithDefaultConfig(String toEmail, String otpCode, String fullName) {
        System.out.println("üîÑ S·ª¨ D·ª§NG C·∫§U H√åNH M·∫∂C ƒê·ªäNH CHO RESET PASSWORD");
        
        final String GMAIL_USERNAME = "hhqan61@gmail.com";
        final String GMAIL_APP_PASSWORD = "uztjygdbmvlvojmu";
        
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.debug", "true");
        
        try {
            Session session = Session.getInstance(props, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(GMAIL_USERNAME, GMAIL_APP_PASSWORD);
                }
            });
            
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(GMAIL_USERNAME, "TechSign"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject("TechSign - ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u");
            
            String htmlContent = buildPasswordResetEmailTemplate(otpCode, fullName);
            message.setContent(htmlContent, "text/html; charset=utf-8");
            
            Transport.send(message);
            System.out.println("‚úÖ G·ª¨I EMAIL RESET PASSWORD TH√ÄNH C√îNG V·ªöI C·∫§U H√åNH M·∫∂C ƒê·ªäNH!");
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI V·ªöI C·∫§U H√åNH M·∫∂C ƒê·ªäNH RESET PASSWORD:");
            e.printStackTrace();
            return false;
        }
    }
    
    private static String buildPasswordResetEmailTemplate(String otpCode, String fullName) {
        return "<!DOCTYPE html>" +
                "<html>" +
                "<head>" +
                "<meta charset='UTF-8'>" +
                "<style>" +
                "body { font-family: Arial, sans-serif; background-color: #f4f4f4; margin: 0; padding: 20px; }" +
                ".container { max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }" +
                ".header { text-align: center; margin-bottom: 30px; }" +
                ".logo { color: #17ac6a; font-size: 24px; font-weight: bold; }" +
                ".otp-code { background-color: #dc3545; color: white; font-size: 32px; font-weight: bold; padding: 15px 30px; border-radius: 8px; text-align: center; margin: 20px 0; letter-spacing: 5px; }" +
                ".warning { background-color: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 15px; border-radius: 8px; margin: 20px 0; }" +
                ".footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }" +
                ".security-tips { background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0; }" +
                "</style>" +
                "</head>" +
                "<body>" +
                "<div class='container'>" +
                "<div class='header'>" +
                "<div class='logo'>TechSign</div>" +
                "<h2>üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>" +
                "</div>" +
                "<p>Xin ch√†o <strong>" + (fullName != null ? fullName : "b·∫°n") + "</strong>,</p>" +
                "<p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n TechSign c·ªßa b·∫°n. Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP d∆∞·ªõi ƒë√¢y ƒë·ªÉ ti·∫øp t·ª•c:</p>" +
                "<div class='otp-code'>" + otpCode + "</div>" +
                "<div class='warning'>" +
                "<strong>‚ö†Ô∏è C·∫£nh b√°o b·∫£o m·∫≠t:</strong><br>" +
                "N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y v√† ki·ªÉm tra b·∫£o m·∫≠t t√†i kho·∫£n." +
                "</div>" +
                "<div class='security-tips'>" +
                "<h4>üìã L∆∞u √Ω quan tr·ªçng:</h4>" +
                "<ul>" +
                "<li>M√£ OTP c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong></li>" +
                "<li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>" +
                "<li>Ch·ªâ s·ª≠ d·ª•ng m√£ n√†y tr√™n trang web ch√≠nh th·ª©c c·ªßa TechSign</li>" +
                "<li>Sau khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y ƒëƒÉng xu·∫•t kh·ªèi t·∫•t c·∫£ thi·∫øt b·ªã kh√°c</li>" +
                "</ul>" +
                "</div>" +
                "<p><strong>M·∫πo b·∫£o m·∫≠t:</strong> H√£y ch·ªçn m·∫≠t kh·∫©u m·∫°nh bao g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát.</p>" +
                "<div class='footer'>" +
                "<p>N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>" +
                "<p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© TechSign</p>" +
                "<hr>" +
                "<p style='font-size: 12px; color: #999;'>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>" +
                "</div>" +
                "</div>" +
                "</body>" +
                "</html>";
    }
}